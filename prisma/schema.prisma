generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  description  String
  difficulty   Int
  rating       Int
  department   String?
  project_id   String      @id @default(uuid())
  name         String
  team_lead    String
  created_date DateTime
  Department   Department? @relation(fields: [department], references: [department_id])
  User         User[]      @relation("ProjectToUser")
}

model Department {
  department_id String        @id
  name          String
  projects      Project[]
  AppliedRole   AppliedRole[] @relation("appliedDepartment")
  User          User[]
}

model User {
  batch           String?
  department      Department?   @relation(fields: [departmentId], references: [department_id])
  departmentId    String?
  discord         String?
  email           String        @unique
  faculty         String?
  gender          String?
  hashedPassword  String
  id              String        @id
  image           String?
  major           String?
  name            String
  personal_email  String?
  role            String
  telegram        String?
  total_events    Int?          @default(0)
  year            String?
  isAdmin         Boolean?      @default(false)
  wallet          String?
  interviewNotes  String?
  appliedRoles    AppliedRole[] @relation("applicant")
  AttendanceTaken Attendance[]
  events          Event[]       @relation("EventToUser")
  projects        Project[]     @relation("ProjectToUser")
  Attendance      Attendance[]  @relation("attendanceToUser")
}

model Event {
  endDate    DateTime     @db.Date
  hasStarted Boolean      @default(false)
  name       String
  id         String       @id @default(uuid())
  qr_code    String?
  startDate  DateTime     @default(now()) @db.Date
  Attendance Attendance[]
  attendees  User[]       @relation("EventToUser")
}

model Log {
  date    DateTime? @default(now())
  message String
  id      String    @id @default(uuid())
  title   String
  type    LogType
}

model Attendance {
  id      String @id @default(uuid())
  eventId String
  userId  String
  Event   Event  @relation(fields: [eventId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  User    User[] @relation("attendanceToUser")
}

enum LogType {
  WARNING
  ERROR
}

model AppliedRole {
  id           String            @id @default(uuid())
  rank         Int
  department   Department        @relation("appliedDepartment", fields: [departmentId], references: [department_id])
  departmentId String
  role         String
  status       ApplicationStatus
  applicant    User              @relation("applicant", fields: [applicantId], references: [id])
  applicantId  String
}

enum ApplicationStatus {
  ACCEPTED
  OFFERED
  PENDINGREVIEW
  INTERVIEWED
  REJECTED
}
