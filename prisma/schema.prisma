generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  description  String
  difficulty   Int
  rating       Int
  department   String?
  project_id   Int         @id
  name         String
  team_lead    String
  created_date DateTime
  Department   Department? @relation(fields: [department], references: [department_id])
  User         User[]      @relation("ProjectToUser")
}

model Department {
  department_id String         @id
  name          String
  announcements Announcement[]
  projects      Project[]
  AppliedRole   AppliedRole[]  @relation("appliedDepartment")
}

model Announcement {
  announcement_id String      @id
  content         String
  image           String?
  title           String
  updated_date    DateTime
  uploaded_date   DateTime
  department_id   String?
  userId          String
  Department      Department? @relation(fields: [department_id], references: [department_id])
  created_by      User        @relation(fields: [userId], references: [id])
}

model User {
  attendance      Int?           @default(0)
  batch           String?
  department      String?
  diet            String?
  discord         String?
  email           String         @unique
  faculty         String?
  gender          String?
  hashedPassword  String
  hobbies         String?
  id              String         @id
  image           String?
  level           String
  linkedin        String?
  major           String?
  name            String?
  phone           String?
  personal_email  String?
  race            String?
  roles           String?
  shirt           String?
  telegram        String?
  total_events    Int?           @default(0)
  wallet          String?
  year            String?
  date_of_birth   DateTime?
  isAdmin         Boolean?       @default(false)
  interviewNotes  String?
  appliedRoles    AppliedRole[]  @relation("applicant")
  announcements   Announcement[]
  events          Event[]        @relation("EventToUser")
  projects        Project[]      @relation("ProjectToUser")
  Attendance      Attendance[]   @relation("attendanceToUser")
  AttendanceTaken Attendance[]
  AppliedRole     AppliedRole[]
}

model Event {
  endDate    DateTime     @db.Date
  hasStarted Boolean      @default(false)
  name       String
  id         String       @id @default(uuid())
  qr_code    String?
  startDate  DateTime     @default(now()) @db.Date
  Attendance Attendance[]
  attendees  User[]       @relation("EventToUser")
}

model Log {
  date    DateTime? @default(now())
  message String
  id      String    @id @default(uuid())
  title   String
  type    LogType
}

model Attendance {
  id      String @id
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  Event   Event  @relation(fields: [eventId], references: [id])
  User    User[] @relation("attendanceToUser")
  userId  String
}

enum LogType {
  WARNING
  ERROR
}

model AppliedRole {
  id             String            @id
  rank           Int
  department     Department        @relation("appliedDepartment", fields: [departmentId], references: [department_id])
  departmentId   String
  role           String
  status         ApplicationStatus
  applicant      User              @relation("applicant", fields: [applicantEmail], references: [email])
  applicantEmail String
  User           User?             @relation(fields: [userId], references: [id])
  userId         String?
}

enum ApplicationStatus {
  ACCEPTED
  OFFERED
  PENDINGREVIEW
  INTERVIEWED
  REJECTED
}
